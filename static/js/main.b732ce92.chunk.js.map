{"version":3,"sources":["SearchBar.js","ProductCategoryRow.js","ProductRow.js","ProductTable.js","FilterableProductTable.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleFilterTextChange","bind","handleInStockChange","e","this","onFilterTextChange","target","value","onInStockChange","checked","filterText","inStockOnly","type","placeholder","onChange","Component","ProductCategoryRow","category","colSpan","ProductRow","product","name","stocked","style","color","price","ProductTable","rows","lastCategory","products","forEach","indexOf","push","key","React","FilterTableProduct","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","FilterableProductTable","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b732ce92.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchBar extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n\t    this.handleInStockChange = this.handleInStockChange.bind(this);\n  \t}\n\n  \thandleFilterTextChange(e) {\n\t    this.props.onFilterTextChange(e.target.value);\n\t}\n\t  \n\thandleInStockChange(e) {\n\t    this.props.onInStockChange(e.target.checked);\n\t}\n\n\trender() {\n\t\tconst filterText = this.props.filterText;\n\t\tconst inStockOnly = this.props.inStockOnly;\n\n\t\treturn(\n\t\t\t<form>\n\t\t\t\t<input type=\"text\" placeholder=\"Search...\" value={this.props.filterText} onChange={this.handleFilterTextChange} />\n\t\t\t\t<p><input type=\"checkbox\" checked={this.props.inStockOnly} onChange={this.handleInStockChange} />Only show products in stock</p>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default SearchBar;","import React, {Component} from 'react';\n\nclass ProductCategoryRow extends Component {\n  render() {\n    const category = this.props.category;\n    \n    return (\n      <tr>\n        <th colSpan=\"2\">\n          {category}\n        </th>\n      </tr>\n    );\n  }\n}\n\nexport default ProductCategoryRow;","import React, {Component} from 'react';\n\nclass ProductRow extends Component {\n  render() {\n    const product = this.props.product;\n    const name = product.stocked ? product.name : <span style={{color: 'red'}}> {product.name} </span>;\n\n    return (\n      <tr>\n        <td>{name}</td>\n        <td>{product.price}</td>\n      </tr>\n    );\n  }\n}\n\n\nexport default ProductRow;","import React, {Component} from 'react';\nimport ProductCategoryRow from './ProductCategoryRow';\nimport ProductRow from './ProductRow';\n\nclass ProductTable extends React.Component {\n  render() {\n  \tconst filterText = this.props.filterText;\n    const inStockOnly = this.props.inStockOnly;\n\n    const rows = [];\n    let lastCategory = null;\n\n    this.props.products.forEach((product) => {\n\n    \tif (product.name.indexOf(filterText) === -1) {\n        return;\n\t      }\n\t      if (inStockOnly && !product.stocked) {\n\t        return;\n\t      }\n\n\t      if (product.category !== lastCategory) {\n\t    \n\t        rows.push(<ProductCategoryRow category={product.category}  key={product.category} />);\n\t      }\n      \n\t      rows.push(<ProductRow product={product}  key={product.name} />);\n\t      lastCategory = product.category;\n    });\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n}\nexport default ProductTable;","import React, {Component} from 'react';\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\nimport ProductCategoryRow from './ProductCategoryRow';\nimport ProductRow from './ProductRow';\n\nclass FilterTableProduct extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText:\"\",\n      inStockOnly: false\n    }\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    this.handleInStockChange = this.handleInStockChange.bind(this);\n  }\n\n  handleFilterTextChange(filterText) {\n    this.setState({\n      filterText:filterText\n    })\n  }\n\n   handleInStockChange(inStockOnly) {\n    this.setState({\n      inStockOnly: inStockOnly\n    })\n  }\n\n  render() {\n    return(\n      <div>\n          <SearchBar \n              filterText={this.state.filterText}\n              inStockOnly={this.state.inStockOnly}\n              onFilterTextChange={this.handleFilterTextChange}\n              onInStockChange={this.handleInStockChange} />\n          <ProductTable \n            products={this.props.products} \n            filterText={this.state.filterText} \n            inStockOnly={this.state.inStockOnly} />\n      </div>\n    );\n  }\n}\n\nexport default FilterTableProduct;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FilterableProductTable from './FilterableProductTable';\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst PRODUCTS = [\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n];\n\nReactDOM.render(<FilterableProductTable products={PRODUCTS} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}